#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BigBallz.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BigBallz")]
	public partial class BigBallzDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBet(Bet instance);
    partial void UpdateBet(Bet instance);
    partial void DeleteBet(Bet instance);
    partial void InsertBetRule(BetRule instance);
    partial void UpdateBetRule(BetRule instance);
    partial void DeleteBetRule(BetRule instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertMatchRule(MatchRule instance);
    partial void UpdateMatchRule(MatchRule instance);
    partial void DeleteMatchRule(MatchRule instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertStage(Stage instance);
    partial void UpdateStage(Stage instance);
    partial void DeleteStage(Stage instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertUserMapping(UserMapping instance);
    partial void UpdateUserMapping(UserMapping instance);
    partial void DeleteUserMapping(UserMapping instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertBonusBet(BonusBet instance);
    partial void UpdateBonusBet(BonusBet instance);
    partial void DeleteBonusBet(BonusBet instance);
    partial void InsertBonus(Bonus instance);
    partial void UpdateBonus(Bonus instance);
    partial void DeleteBonus(Bonus instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertPaymentStatus(PaymentStatus instance);
    partial void UpdatePaymentStatus(PaymentStatus instance);
    partial void DeletePaymentStatus(PaymentStatus instance);
    #endregion
		
		public BigBallzDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BigBallzConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BigBallzDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BigBallzDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BigBallzDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BigBallzDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bet> Bets
		{
			get
			{
				return this.GetTable<Bet>();
			}
		}
		
		public System.Data.Linq.Table<BetRule> BetRules
		{
			get
			{
				return this.GetTable<BetRule>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<MatchRule> MatchRules
		{
			get
			{
				return this.GetTable<MatchRule>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Stage> Stages
		{
			get
			{
				return this.GetTable<Stage>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<UserMapping> UserMappings
		{
			get
			{
				return this.GetTable<UserMapping>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<BonusBet> BonusBets
		{
			get
			{
				return this.GetTable<BonusBet>();
			}
		}
		
		public System.Data.Linq.Table<Bonus> Bonus
		{
			get
			{
				return this.GetTable<Bonus>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<PaymentStatus> PaymentStatus
		{
			get
			{
				return this.GetTable<PaymentStatus>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bet")]
	public partial class Bet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BetId;
		
		private int _User;
		
		private int _Match;
		
		private System.Nullable<int> _Score1;
		
		private System.Nullable<int> _Score2;
		
		private EntityRef<Match> _Match1;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBetIdChanging(int value);
    partial void OnBetIdChanged();
    partial void OnUserChanging(int value);
    partial void OnUserChanged();
    partial void OnMatchChanging(int value);
    partial void OnMatchChanged();
    partial void OnScore1Changing(System.Nullable<int> value);
    partial void OnScore1Changed();
    partial void OnScore2Changing(System.Nullable<int> value);
    partial void OnScore2Changed();
    #endregion
		
		public Bet()
		{
			this._Match1 = default(EntityRef<Match>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BetId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BetId
		{
			get
			{
				return this._BetId;
			}
			set
			{
				if ((this._BetId != value))
				{
					this.OnBetIdChanging(value);
					this.SendPropertyChanging();
					this._BetId = value;
					this.SendPropertyChanged("BetId");
					this.OnBetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="Int NOT NULL")]
		public int User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match", DbType="Int NOT NULL")]
		public int Match
		{
			get
			{
				return this._Match;
			}
			set
			{
				if ((this._Match != value))
				{
					if (this._Match1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchChanging(value);
					this.SendPropertyChanging();
					this._Match = value;
					this.SendPropertyChanged("Match");
					this.OnMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score1", DbType="Int NOT NULL")]
		public System.Nullable<int> Score1
		{
			get
			{
				return this._Score1;
			}
			set
			{
				if ((this._Score1 != value))
				{
					this.OnScore1Changing(value);
					this.SendPropertyChanging();
					this._Score1 = value;
					this.SendPropertyChanged("Score1");
					this.OnScore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score2", DbType="Int NOT NULL")]
		public System.Nullable<int> Score2
		{
			get
			{
				return this._Score2;
			}
			set
			{
				if ((this._Score2 != value))
				{
					this.OnScore2Changing(value);
					this.SendPropertyChanging();
					this._Score2 = value;
					this.SendPropertyChanged("Score2");
					this.OnScore2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Bet", Storage="_Match1", ThisKey="Match", OtherKey="MatchId", IsForeignKey=true)]
		public Match Match1
		{
			get
			{
				return this._Match1.Entity;
			}
			set
			{
				Match previousValue = this._Match1.Entity;
				if (((previousValue != value) 
							|| (this._Match1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match1.Entity = null;
						previousValue.Bets.Remove(this);
					}
					this._Match1.Entity = value;
					if ((value != null))
					{
						value.Bets.Add(this);
						this._Match = value.MatchId;
					}
					else
					{
						this._Match = default(int);
					}
					this.SendPropertyChanged("Match1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Bet", Storage="_User1", ThisKey="User", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Bets.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Bets.Add(this);
						this._User = value.UserId;
					}
					else
					{
						this._User = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BetRule")]
	public partial class BetRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BetRuleId;
		
		private string _Name;
		
		private string _Description;
		
		private int _Match;
		
		private int _Value;
		
		private EntityRef<Match> _Match1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBetRuleIdChanging(int value);
    partial void OnBetRuleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMatchChanging(int value);
    partial void OnMatchChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public BetRule()
		{
			this._Match1 = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BetRuleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BetRuleId
		{
			get
			{
				return this._BetRuleId;
			}
			set
			{
				if ((this._BetRuleId != value))
				{
					this.OnBetRuleIdChanging(value);
					this.SendPropertyChanging();
					this._BetRuleId = value;
					this.SendPropertyChanged("BetRuleId");
					this.OnBetRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Match", DbType="Int NOT NULL")]
		public int Match
		{
			get
			{
				return this._Match;
			}
			set
			{
				if ((this._Match != value))
				{
					if (this._Match1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchChanging(value);
					this.SendPropertyChanging();
					this._Match = value;
					this.SendPropertyChanged("Match");
					this.OnMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_BetRule", Storage="_Match1", ThisKey="Match", OtherKey="MatchId", IsForeignKey=true)]
		public Match Match1
		{
			get
			{
				return this._Match1.Entity;
			}
			set
			{
				Match previousValue = this._Match1.Entity;
				if (((previousValue != value) 
							|| (this._Match1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match1.Entity = null;
						previousValue.BetRules.Remove(this);
					}
					this._Match1.Entity = value;
					if ((value != null))
					{
						value.BetRules.Add(this);
						this._Match = value.MatchId;
					}
					else
					{
						this._Match = default(int);
					}
					this.SendPropertyChanged("Match1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _Name;
		
		private EntitySet<MatchRule> _MatchRules;
		
		private EntitySet<MatchRule> _MatchRules1;
		
		private EntitySet<Bonus> _Bonus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Group()
		{
			this._MatchRules = new EntitySet<MatchRule>(new Action<MatchRule>(this.attach_MatchRules), new Action<MatchRule>(this.detach_MatchRules));
			this._MatchRules1 = new EntitySet<MatchRule>(new Action<MatchRule>(this.attach_MatchRules1), new Action<MatchRule>(this.detach_MatchRules1));
			this._Bonus = new EntitySet<Bonus>(new Action<Bonus>(this.attach_Bonus), new Action<Bonus>(this.detach_Bonus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_MatchRule", Storage="_MatchRules", ThisKey="GroupId", OtherKey="SourceGroupWinner")]
		public EntitySet<MatchRule> MatchRules
		{
			get
			{
				return this._MatchRules;
			}
			set
			{
				this._MatchRules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_MatchRule1", Storage="_MatchRules1", ThisKey="GroupId", OtherKey="SourceGroupVice")]
		public EntitySet<MatchRule> MatchRules1
		{
			get
			{
				return this._MatchRules1;
			}
			set
			{
				this._MatchRules1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Bonus", Storage="_Bonus", ThisKey="GroupId", OtherKey="Group")]
		public EntitySet<Bonus> Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				this._Bonus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchRules(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_MatchRules(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_MatchRules1(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Group1 = this;
		}
		
		private void detach_MatchRules1(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Group1 = null;
		}
		
		private void attach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.Group1 = this;
		}
		
		private void detach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.Group1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchId;
		
		private int _StageId;
		
		private System.DateTime _StartTime;
		
		private string _Team1Id;
		
		private string _Team2Id;
		
		private System.Nullable<int> _Score1;
		
		private System.Nullable<int> _Score2;
		
		private EntitySet<Bet> _Bets;
		
		private EntitySet<BetRule> _BetRules;
		
		private EntitySet<MatchRule> _MatchRules;
		
		private EntitySet<MatchRule> _MatchRules1;
		
		private EntitySet<MatchRule> _MatchRules2;
		
		private EntityRef<Stage> _Stage;
		
		private EntityRef<Team> _Team1;
		
		private EntityRef<Team> _Team2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(int value);
    partial void OnMatchIdChanged();
    partial void OnStageIdChanging(int value);
    partial void OnStageIdChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnTeam1IdChanging(string value);
    partial void OnTeam1IdChanged();
    partial void OnTeam2IdChanging(string value);
    partial void OnTeam2IdChanged();
    partial void OnScore1Changing(System.Nullable<int> value);
    partial void OnScore1Changed();
    partial void OnScore2Changing(System.Nullable<int> value);
    partial void OnScore2Changed();
    #endregion
		
		public Match()
		{
			this._Bets = new EntitySet<Bet>(new Action<Bet>(this.attach_Bets), new Action<Bet>(this.detach_Bets));
			this._BetRules = new EntitySet<BetRule>(new Action<BetRule>(this.attach_BetRules), new Action<BetRule>(this.detach_BetRules));
			this._MatchRules = new EntitySet<MatchRule>(new Action<MatchRule>(this.attach_MatchRules), new Action<MatchRule>(this.detach_MatchRules));
			this._MatchRules1 = new EntitySet<MatchRule>(new Action<MatchRule>(this.attach_MatchRules1), new Action<MatchRule>(this.detach_MatchRules1));
			this._MatchRules2 = new EntitySet<MatchRule>(new Action<MatchRule>(this.attach_MatchRules2), new Action<MatchRule>(this.detach_MatchRules2));
			this._Stage = default(EntityRef<Stage>);
			this._Team1 = default(EntityRef<Team>);
			this._Team2 = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Stage", Storage="_StageId", DbType="Int NOT NULL")]
		public int StageId
		{
			get
			{
				return this._StageId;
			}
			set
			{
				if ((this._StageId != value))
				{
					this.OnStageIdChanging(value);
					this.SendPropertyChanging();
					this._StageId = value;
					this.SendPropertyChanged("StageId");
					this.OnStageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Team1", Storage="_Team1Id", DbType="Char(3)")]
		public string Team1Id
		{
			get
			{
				return this._Team1Id;
			}
			set
			{
				if ((this._Team1Id != value))
				{
					this.OnTeam1IdChanging(value);
					this.SendPropertyChanging();
					this._Team1Id = value;
					this.SendPropertyChanged("Team1Id");
					this.OnTeam1IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Team2", Storage="_Team2Id", DbType="Char(3)")]
		public string Team2Id
		{
			get
			{
				return this._Team2Id;
			}
			set
			{
				if ((this._Team2Id != value))
				{
					this.OnTeam2IdChanging(value);
					this.SendPropertyChanging();
					this._Team2Id = value;
					this.SendPropertyChanged("Team2Id");
					this.OnTeam2IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score1", DbType="Int")]
		public System.Nullable<int> Score1
		{
			get
			{
				return this._Score1;
			}
			set
			{
				if ((this._Score1 != value))
				{
					this.OnScore1Changing(value);
					this.SendPropertyChanging();
					this._Score1 = value;
					this.SendPropertyChanged("Score1");
					this.OnScore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score2", DbType="Int")]
		public System.Nullable<int> Score2
		{
			get
			{
				return this._Score2;
			}
			set
			{
				if ((this._Score2 != value))
				{
					this.OnScore2Changing(value);
					this.SendPropertyChanging();
					this._Score2 = value;
					this.SendPropertyChanged("Score2");
					this.OnScore2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Bet", Storage="_Bets", ThisKey="MatchId", OtherKey="Match")]
		public EntitySet<Bet> Bets
		{
			get
			{
				return this._Bets;
			}
			set
			{
				this._Bets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_BetRule", Storage="_BetRules", ThisKey="MatchId", OtherKey="Match")]
		public EntitySet<BetRule> BetRules
		{
			get
			{
				return this._BetRules;
			}
			set
			{
				this._BetRules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchRule", Storage="_MatchRules", ThisKey="MatchId", OtherKey="DestinationMatch")]
		public EntitySet<MatchRule> MatchRules
		{
			get
			{
				return this._MatchRules;
			}
			set
			{
				this._MatchRules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchRule1", Storage="_MatchRules1", ThisKey="MatchId", OtherKey="SourceMatch1")]
		public EntitySet<MatchRule> MatchRules1
		{
			get
			{
				return this._MatchRules1;
			}
			set
			{
				this._MatchRules1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchRule2", Storage="_MatchRules2", ThisKey="MatchId", OtherKey="SourceMatch2")]
		public EntitySet<MatchRule> MatchRules2
		{
			get
			{
				return this._MatchRules2;
			}
			set
			{
				this._MatchRules2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stage_Match", Storage="_Stage", ThisKey="StageId", OtherKey="StageId", IsForeignKey=true)]
		public Stage Stage
		{
			get
			{
				return this._Stage.Entity;
			}
			set
			{
				Stage previousValue = this._Stage.Entity;
				if (((previousValue != value) 
							|| (this._Stage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stage.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Stage.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._StageId = value.StageId;
					}
					else
					{
						this._StageId = default(int);
					}
					this.SendPropertyChanged("Stage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match", Storage="_Team1", ThisKey="Team1Id", OtherKey="TeamId", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Matches1.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Matches1.Add(this);
						this._Team1Id = value.TeamId;
					}
					else
					{
						this._Team1Id = default(string);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match1", Storage="_Team2", ThisKey="Team2Id", OtherKey="TeamId", IsForeignKey=true)]
		public Team Team2
		{
			get
			{
				return this._Team2.Entity;
			}
			set
			{
				Team previousValue = this._Team2.Entity;
				if (((previousValue != value) 
							|| (this._Team2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team2.Entity = null;
						previousValue.Matches2.Remove(this);
					}
					this._Team2.Entity = value;
					if ((value != null))
					{
						value.Matches2.Add(this);
						this._Team2Id = value.TeamId;
					}
					else
					{
						this._Team2Id = default(string);
					}
					this.SendPropertyChanged("Team2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bets(Bet entity)
		{
			this.SendPropertyChanging();
			entity.Match1 = this;
		}
		
		private void detach_Bets(Bet entity)
		{
			this.SendPropertyChanging();
			entity.Match1 = null;
		}
		
		private void attach_BetRules(BetRule entity)
		{
			this.SendPropertyChanging();
			entity.Match1 = this;
		}
		
		private void detach_BetRules(BetRule entity)
		{
			this.SendPropertyChanging();
			entity.Match1 = null;
		}
		
		private void attach_MatchRules(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchRules(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_MatchRules1(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Match1 = this;
		}
		
		private void detach_MatchRules1(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Match1 = null;
		}
		
		private void attach_MatchRules2(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Match2 = this;
		}
		
		private void detach_MatchRules2(MatchRule entity)
		{
			this.SendPropertyChanging();
			entity.Match2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchRule")]
	public partial class MatchRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchRuleId;
		
		private int _DestinationMatch;
		
		private System.Nullable<int> _SourceMatch1;
		
		private System.Nullable<int> _SourceMatch2;
		
		private System.Nullable<int> _SourceGroupWinner;
		
		private System.Nullable<int> _SourceGroupVice;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Group> _Group1;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Match> _Match1;
		
		private EntityRef<Match> _Match2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchRuleIdChanging(int value);
    partial void OnMatchRuleIdChanged();
    partial void OnDestinationMatchChanging(int value);
    partial void OnDestinationMatchChanged();
    partial void OnSourceMatch1Changing(System.Nullable<int> value);
    partial void OnSourceMatch1Changed();
    partial void OnSourceMatch2Changing(System.Nullable<int> value);
    partial void OnSourceMatch2Changed();
    partial void OnSourceGroupWinnerChanging(System.Nullable<int> value);
    partial void OnSourceGroupWinnerChanged();
    partial void OnSourceGroupViceChanging(System.Nullable<int> value);
    partial void OnSourceGroupViceChanged();
    #endregion
		
		public MatchRule()
		{
			this._Group = default(EntityRef<Group>);
			this._Group1 = default(EntityRef<Group>);
			this._Match = default(EntityRef<Match>);
			this._Match1 = default(EntityRef<Match>);
			this._Match2 = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchRuleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchRuleId
		{
			get
			{
				return this._MatchRuleId;
			}
			set
			{
				if ((this._MatchRuleId != value))
				{
					this.OnMatchRuleIdChanging(value);
					this.SendPropertyChanging();
					this._MatchRuleId = value;
					this.SendPropertyChanged("MatchRuleId");
					this.OnMatchRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationMatch", DbType="Int NOT NULL")]
		public int DestinationMatch
		{
			get
			{
				return this._DestinationMatch;
			}
			set
			{
				if ((this._DestinationMatch != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationMatchChanging(value);
					this.SendPropertyChanging();
					this._DestinationMatch = value;
					this.SendPropertyChanged("DestinationMatch");
					this.OnDestinationMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceMatch1", DbType="Int")]
		public System.Nullable<int> SourceMatch1
		{
			get
			{
				return this._SourceMatch1;
			}
			set
			{
				if ((this._SourceMatch1 != value))
				{
					if (this._Match1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceMatch1Changing(value);
					this.SendPropertyChanging();
					this._SourceMatch1 = value;
					this.SendPropertyChanged("SourceMatch1");
					this.OnSourceMatch1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceMatch2", DbType="Int")]
		public System.Nullable<int> SourceMatch2
		{
			get
			{
				return this._SourceMatch2;
			}
			set
			{
				if ((this._SourceMatch2 != value))
				{
					if (this._Match2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceMatch2Changing(value);
					this.SendPropertyChanging();
					this._SourceMatch2 = value;
					this.SendPropertyChanged("SourceMatch2");
					this.OnSourceMatch2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceGroupWinner", DbType="Int")]
		public System.Nullable<int> SourceGroupWinner
		{
			get
			{
				return this._SourceGroupWinner;
			}
			set
			{
				if ((this._SourceGroupWinner != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceGroupWinnerChanging(value);
					this.SendPropertyChanging();
					this._SourceGroupWinner = value;
					this.SendPropertyChanged("SourceGroupWinner");
					this.OnSourceGroupWinnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceGroupVice", DbType="Int")]
		public System.Nullable<int> SourceGroupVice
		{
			get
			{
				return this._SourceGroupVice;
			}
			set
			{
				if ((this._SourceGroupVice != value))
				{
					if (this._Group1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceGroupViceChanging(value);
					this.SendPropertyChanging();
					this._SourceGroupVice = value;
					this.SendPropertyChanged("SourceGroupVice");
					this.OnSourceGroupViceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_MatchRule", Storage="_Group", ThisKey="SourceGroupWinner", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.MatchRules.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.MatchRules.Add(this);
						this._SourceGroupWinner = value.GroupId;
					}
					else
					{
						this._SourceGroupWinner = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_MatchRule1", Storage="_Group1", ThisKey="SourceGroupVice", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group1
		{
			get
			{
				return this._Group1.Entity;
			}
			set
			{
				Group previousValue = this._Group1.Entity;
				if (((previousValue != value) 
							|| (this._Group1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group1.Entity = null;
						previousValue.MatchRules1.Remove(this);
					}
					this._Group1.Entity = value;
					if ((value != null))
					{
						value.MatchRules1.Add(this);
						this._SourceGroupVice = value.GroupId;
					}
					else
					{
						this._SourceGroupVice = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchRule", Storage="_Match", ThisKey="DestinationMatch", OtherKey="MatchId", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchRules.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchRules.Add(this);
						this._DestinationMatch = value.MatchId;
					}
					else
					{
						this._DestinationMatch = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchRule1", Storage="_Match1", ThisKey="SourceMatch1", OtherKey="MatchId", IsForeignKey=true)]
		public Match Match1
		{
			get
			{
				return this._Match1.Entity;
			}
			set
			{
				Match previousValue = this._Match1.Entity;
				if (((previousValue != value) 
							|| (this._Match1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match1.Entity = null;
						previousValue.MatchRules1.Remove(this);
					}
					this._Match1.Entity = value;
					if ((value != null))
					{
						value.MatchRules1.Add(this);
						this._SourceMatch1 = value.MatchId;
					}
					else
					{
						this._SourceMatch1 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchRule2", Storage="_Match2", ThisKey="SourceMatch2", OtherKey="MatchId", IsForeignKey=true)]
		public Match Match2
		{
			get
			{
				return this._Match2.Entity;
			}
			set
			{
				Match previousValue = this._Match2.Entity;
				if (((previousValue != value) 
							|| (this._Match2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match2.Entity = null;
						previousValue.MatchRules2.Remove(this);
					}
					this._Match2.Entity = value;
					if ((value != null))
					{
						value.MatchRules2.Add(this);
						this._SourceMatch2 = value.MatchId;
					}
					else
					{
						this._SourceMatch2 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Match2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stage")]
	public partial class Stage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StageId;
		
		private string _Name;
		
		private EntitySet<Match> _Matches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStageIdChanging(int value);
    partial void OnStageIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Stage()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StageId
		{
			get
			{
				return this._StageId;
			}
			set
			{
				if ((this._StageId != value))
				{
					this.OnStageIdChanging(value);
					this.SendPropertyChanging();
					this._StageId = value;
					this.SendPropertyChanged("StageId");
					this.OnStageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stage_Match", Storage="_Matches", ThisKey="StageId", OtherKey="StageId")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Stage = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Stage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TeamId;
		
		private string _Name;
		
		private System.Nullable<int> _FifaId;
		
		private int _Group;
		
		private EntitySet<Match> _Matches1;
		
		private EntitySet<Match> _Matches2;
		
		private EntitySet<BonusBet> _BonusBets;
		
		private EntitySet<Bonus> _Bonus;
		
		private EntityRef<Group> _Group1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIdChanging(string value);
    partial void OnTeamIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFifaIdChanging(System.Nullable<int> value);
    partial void OnFifaIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
		
		public Team()
		{
			this._Matches1 = new EntitySet<Match>(new Action<Match>(this.attach_Matches1), new Action<Match>(this.detach_Matches1));
			this._Matches2 = new EntitySet<Match>(new Action<Match>(this.attach_Matches2), new Action<Match>(this.detach_Matches2));
			this._BonusBets = new EntitySet<BonusBet>(new Action<BonusBet>(this.attach_BonusBets), new Action<BonusBet>(this.detach_BonusBets));
			this._Bonus = new EntitySet<Bonus>(new Action<Bonus>(this.attach_Bonus), new Action<Bonus>(this.detach_Bonus));
			this._Group1 = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Char(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FifaId", DbType="Int")]
		public System.Nullable<int> FifaId
		{
			get
			{
				return this._FifaId;
			}
			set
			{
				if ((this._FifaId != value))
				{
					this.OnFifaIdChanging(value);
					this.SendPropertyChanging();
					this._FifaId = value;
					this.SendPropertyChanged("FifaId");
					this.OnFifaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match", Storage="_Matches1", ThisKey="TeamId", OtherKey="Team1Id")]
		public EntitySet<Match> Matches1
		{
			get
			{
				return this._Matches1;
			}
			set
			{
				this._Matches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Match1", Storage="_Matches2", ThisKey="TeamId", OtherKey="Team2Id")]
		public EntitySet<Match> Matches2
		{
			get
			{
				return this._Matches2;
			}
			set
			{
				this._Matches2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_BonusBet", Storage="_BonusBets", ThisKey="TeamId", OtherKey="Team")]
		public EntitySet<BonusBet> BonusBets
		{
			get
			{
				return this._BonusBets;
			}
			set
			{
				this._BonusBets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Bonus", Storage="_Bonus", ThisKey="TeamId", OtherKey="Team")]
		public EntitySet<Bonus> Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				this._Bonus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Team", Storage="_Group1", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group1.Entity;
			}
			set
			{
				if ((this._Group1.Entity != value))
				{
					this.SendPropertyChanging();
					this._Group1.Entity = value;
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
		
		private void attach_Matches2(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team2 = this;
		}
		
		private void detach_Matches2(Match entity)
		{
			this.SendPropertyChanging();
			entity.Team2 = null;
		}
		
		private void attach_BonusBets(BonusBet entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_BonusBets(BonusBet entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
		
		private void attach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserMapping")]
	public partial class UserMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserMappingId;
		
		private int _UserId;
		
		private string _Identifier;
		
		private System.DateTime _CreatedOn;
		
		private string _ProviderName;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserMappingIdChanging(int value);
    partial void OnUserMappingIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnProviderNameChanging(string value);
    partial void OnProviderNameChanged();
    #endregion
		
		public UserMapping()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserMappingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserMappingId
		{
			get
			{
				return this._UserMappingId;
			}
			set
			{
				if ((this._UserMappingId != value))
				{
					this.OnUserMappingIdChanging(value);
					this.SendPropertyChanging();
					this._UserMappingId = value;
					this.SendPropertyChanged("UserMappingId");
					this.OnUserMappingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ProviderName
		{
			get
			{
				return this._ProviderName;
			}
			set
			{
				if ((this._ProviderName != value))
				{
					this.OnProviderNameChanging(value);
					this.SendPropertyChanging();
					this._ProviderName = value;
					this.SendPropertyChanged("ProviderName");
					this.OnProviderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserMapping", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserMappings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserMappings.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _EmailAddress;
		
		private bool _EmailAddressVerified;
		
		private System.DateTime _CreatedOn;
		
		private string _PhotoUrl;
		
		private bool _Authorized;
		
		private string _AuthorizedBy;
		
		private bool _PagSeguro;
		
		private bool _HelpShown;
		
		private EntitySet<Bet> _Bets;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<UserMapping> _UserMappings;
		
		private EntitySet<BonusBet> _BonusBets;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<PaymentStatus> _PaymentStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnEmailAddressVerifiedChanging(bool value);
    partial void OnEmailAddressVerifiedChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnAuthorizedChanging(bool value);
    partial void OnAuthorizedChanged();
    partial void OnAuthorizedByChanging(string value);
    partial void OnAuthorizedByChanged();
    partial void OnPagSeguroChanging(bool value);
    partial void OnPagSeguroChanged();
    partial void OnHelpShownChanging(bool value);
    partial void OnHelpShownChanged();
    #endregion
		
		public User()
		{
			this._Bets = new EntitySet<Bet>(new Action<Bet>(this.attach_Bets), new Action<Bet>(this.detach_Bets));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._UserMappings = new EntitySet<UserMapping>(new Action<UserMapping>(this.attach_UserMappings), new Action<UserMapping>(this.detach_UserMappings));
			this._BonusBets = new EntitySet<BonusBet>(new Action<BonusBet>(this.attach_BonusBets), new Action<BonusBet>(this.detach_BonusBets));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._PaymentStatus = new EntitySet<PaymentStatus>(new Action<PaymentStatus>(this.attach_PaymentStatus), new Action<PaymentStatus>(this.detach_PaymentStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddressVerified", DbType="Bit NOT NULL")]
		public bool EmailAddressVerified
		{
			get
			{
				return this._EmailAddressVerified;
			}
			set
			{
				if ((this._EmailAddressVerified != value))
				{
					this.OnEmailAddressVerifiedChanging(value);
					this.SendPropertyChanging();
					this._EmailAddressVerified = value;
					this.SendPropertyChanged("EmailAddressVerified");
					this.OnEmailAddressVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="VarChar(250)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Authorized", DbType="Bit NOT NULL")]
		public bool Authorized
		{
			get
			{
				return this._Authorized;
			}
			set
			{
				if ((this._Authorized != value))
				{
					this.OnAuthorizedChanging(value);
					this.SendPropertyChanging();
					this._Authorized = value;
					this.SendPropertyChanged("Authorized");
					this.OnAuthorizedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizedBy", DbType="VarChar(50) NULL")]
		public string AuthorizedBy
		{
			get
			{
				return this._AuthorizedBy;
			}
			set
			{
				if ((this._AuthorizedBy != value))
				{
					this.OnAuthorizedByChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedBy = value;
					this.SendPropertyChanged("AuthorizedBy");
					this.OnAuthorizedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PagSeguro", DbType="Bit NOT NULL")]
		public bool PagSeguro
		{
			get
			{
				return this._PagSeguro;
			}
			set
			{
				if ((this._PagSeguro != value))
				{
					this.OnPagSeguroChanging(value);
					this.SendPropertyChanging();
					this._PagSeguro = value;
					this.SendPropertyChanged("PagSeguro");
					this.OnPagSeguroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HelpShown", DbType="Bit NOT NULL")]
		public bool HelpShown
		{
			get
			{
				return this._HelpShown;
			}
			set
			{
				if ((this._HelpShown != value))
				{
					this.OnHelpShownChanging(value);
					this.SendPropertyChanging();
					this._HelpShown = value;
					this.SendPropertyChanged("HelpShown");
					this.OnHelpShownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Bet", Storage="_Bets", ThisKey="UserId", OtherKey="User")]
		public EntitySet<Bet> Bets
		{
			get
			{
				return this._Bets;
			}
			set
			{
				this._Bets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserMapping", Storage="_UserMappings", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserMapping> UserMappings
		{
			get
			{
				return this._UserMappings;
			}
			set
			{
				this._UserMappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BonusBet", Storage="_BonusBets", ThisKey="UserId", OtherKey="User")]
		public EntitySet<BonusBet> BonusBets
		{
			get
			{
				return this._BonusBets;
			}
			set
			{
				this._BonusBets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="UserId", OtherKey="User")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PaymentStatus", Storage="_PaymentStatus", ThisKey="UserId", OtherKey="User")]
		public EntitySet<PaymentStatus> PaymentStatus
		{
			get
			{
				return this._PaymentStatus;
			}
			set
			{
				this._PaymentStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bets(Bet entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Bets(Bet entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserMappings(UserMapping entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserMappings(UserMapping entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BonusBets(BonusBet entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_BonusBets(BonusBet entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_PaymentStatus(PaymentStatus entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_PaymentStatus(PaymentStatus entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BonusBet")]
	public partial class BonusBet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BonusBetId;
		
		private int _User;
		
		private int _Bonus;
		
		private string _Team;
		
		private EntityRef<BonusBet> _BonusBet2;
		
		private EntityRef<BonusBet> _BonusBet1;
		
		private EntityRef<Team> _Team1;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Bonus> _Bonus11;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBonusBetIdChanging(int value);
    partial void OnBonusBetIdChanged();
    partial void OnUserChanging(int value);
    partial void OnUserChanged();
    partial void OnBonusChanging(int value);
    partial void OnBonusChanged();
    partial void OnTeamChanging(string value);
    partial void OnTeamChanged();
    #endregion
		
		public BonusBet()
		{
			this._BonusBet2 = default(EntityRef<BonusBet>);
			this._BonusBet1 = default(EntityRef<BonusBet>);
			this._Team1 = default(EntityRef<Team>);
			this._User1 = default(EntityRef<User>);
			this._Bonus11 = default(EntityRef<Bonus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BonusBetId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BonusBetId
		{
			get
			{
				return this._BonusBetId;
			}
			set
			{
				if ((this._BonusBetId != value))
				{
					if (this._BonusBet1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBonusBetIdChanging(value);
					this.SendPropertyChanging();
					this._BonusBetId = value;
					this.SendPropertyChanged("BonusBetId");
					this.OnBonusBetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="Int NOT NULL")]
		public int User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bonus", DbType="Int NOT NULL")]
		public int Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				if ((this._Bonus != value))
				{
					if (this._Bonus11.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBonusChanging(value);
					this.SendPropertyChanging();
					this._Bonus = value;
					this.SendPropertyChanged("Bonus");
					this.OnBonusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BonusBet_BonusBet", Storage="_BonusBet2", ThisKey="BonusBetId", OtherKey="BonusBetId", IsUnique=true, IsForeignKey=false)]
		public BonusBet BonusBet2
		{
			get
			{
				return this._BonusBet2.Entity;
			}
			set
			{
				BonusBet previousValue = this._BonusBet2.Entity;
				if (((previousValue != value) 
							|| (this._BonusBet2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BonusBet2.Entity = null;
						previousValue.BonusBet1 = null;
					}
					this._BonusBet2.Entity = value;
					if ((value != null))
					{
						value.BonusBet1 = this;
					}
					this.SendPropertyChanged("BonusBet2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BonusBet_BonusBet", Storage="_BonusBet1", ThisKey="BonusBetId", OtherKey="BonusBetId", IsForeignKey=true)]
		public BonusBet BonusBet1
		{
			get
			{
				return this._BonusBet1.Entity;
			}
			set
			{
				BonusBet previousValue = this._BonusBet1.Entity;
				if (((previousValue != value) 
							|| (this._BonusBet1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BonusBet1.Entity = null;
						previousValue.BonusBet2 = null;
					}
					this._BonusBet1.Entity = value;
					if ((value != null))
					{
						value.BonusBet2 = this;
						this._BonusBetId = value.BonusBetId;
					}
					else
					{
						this._BonusBetId = default(int);
					}
					this.SendPropertyChanged("BonusBet1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_BonusBet", Storage="_Team1", ThisKey="Team", OtherKey="TeamId", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.BonusBets.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.BonusBets.Add(this);
						this._Team = value.TeamId;
					}
					else
					{
						this._Team = default(string);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BonusBet", Storage="_User1", ThisKey="User", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.BonusBets.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.BonusBets.Add(this);
						this._User = value.UserId;
					}
					else
					{
						this._User = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bonus_BonusBet", Storage="_Bonus11", ThisKey="Bonus", OtherKey="BonusId", IsForeignKey=true)]
		public Bonus Bonus11
		{
			get
			{
				return this._Bonus11.Entity;
			}
			set
			{
				Bonus previousValue = this._Bonus11.Entity;
				if (((previousValue != value) 
							|| (this._Bonus11.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bonus11.Entity = null;
						previousValue.BonusBets.Remove(this);
					}
					this._Bonus11.Entity = value;
					if ((value != null))
					{
						value.BonusBets.Add(this);
						this._Bonus = value.BonusId;
					}
					else
					{
						this._Bonus = default(int);
					}
					this.SendPropertyChanged("Bonus11");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bonus")]
	public partial class Bonus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BonusId;
		
		private string _Name;
		
		private string _Team;
		
		private System.Nullable<int> _Group;
		
		private EntitySet<BonusBet> _BonusBets;
		
		private EntityRef<Group> _Group1;
		
		private EntityRef<Team> _Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBonusIdChanging(int value);
    partial void OnBonusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTeamChanging(string value);
    partial void OnTeamChanged();
    partial void OnGroupChanging(System.Nullable<int> value);
    partial void OnGroupChanged();
    #endregion
		
		public Bonus()
		{
			this._BonusBets = new EntitySet<BonusBet>(new Action<BonusBet>(this.attach_BonusBets), new Action<BonusBet>(this.detach_BonusBets));
			this._Group1 = default(EntityRef<Group>);
			this._Team1 = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BonusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BonusId
		{
			get
			{
				return this._BonusId;
			}
			set
			{
				if ((this._BonusId != value))
				{
					this.OnBonusIdChanging(value);
					this.SendPropertyChanging();
					this._BonusId = value;
					this.SendPropertyChanged("BonusId");
					this.OnBonusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="Char(3)")]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="Int")]
		public System.Nullable<int> Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bonus_BonusBet", Storage="_BonusBets", ThisKey="BonusId", OtherKey="Bonus")]
		public EntitySet<BonusBet> BonusBets
		{
			get
			{
				return this._BonusBets;
			}
			set
			{
				this._BonusBets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Bonus", Storage="_Group1", ThisKey="Group", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group1
		{
			get
			{
				return this._Group1.Entity;
			}
			set
			{
				Group previousValue = this._Group1.Entity;
				if (((previousValue != value) 
							|| (this._Group1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group1.Entity = null;
						previousValue.Bonus.Remove(this);
					}
					this._Group1.Entity = value;
					if ((value != null))
					{
						value.Bonus.Add(this);
						this._Group = value.GroupId;
					}
					else
					{
						this._Group = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Bonus", Storage="_Team1", ThisKey="Team", OtherKey="TeamId", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Bonus.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Bonus.Add(this);
						this._Team = value.TeamId;
					}
					else
					{
						this._Team = default(string);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BonusBets(BonusBet entity)
		{
			this.SendPropertyChanging();
			entity.Bonus11 = this;
		}
		
		private void detach_BonusBets(BonusBet entity)
		{
			this.SendPropertyChanging();
			entity.Bonus11 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _User;
		
		private string _Comments;
		
		private System.DateTime _CommentedOn;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserChanging(int value);
    partial void OnUserChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCommentedOnChanging(System.DateTime value);
    partial void OnCommentedOnChanged();
    #endregion
		
		public Comment()
		{
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="Int NOT NULL")]
		public int User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CommentedOn
		{
			get
			{
				return this._CommentedOn;
			}
			set
			{
				if ((this._CommentedOn != value))
				{
					this.OnCommentedOnChanging(value);
					this.SendPropertyChanging();
					this._CommentedOn = value;
					this.SendPropertyChanged("CommentedOn");
					this.OnCommentedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User1", ThisKey="User", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._User = value.UserId;
					}
					else
					{
						this._User = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentStatus")]
	public partial class PaymentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _User;
		
		private System.DateTime _Date;
		
		private System.DateTime _LastEventDate;
		
		private string _Transaction;
		
		private string _Status;
		
		private string _SenderEmail;
		
		private string _SenderName;
		
		private string _PaymentMethod;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserChanging(int value);
    partial void OnUserChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnLastEventDateChanging(System.DateTime value);
    partial void OnLastEventDateChanged();
    partial void OnTransactionChanging(string value);
    partial void OnTransactionChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnSenderEmailChanging(string value);
    partial void OnSenderEmailChanged();
    partial void OnSenderNameChanging(string value);
    partial void OnSenderNameChanged();
    partial void OnPaymentMethodChanging(string value);
    partial void OnPaymentMethodChanged();
    #endregion
		
		public PaymentStatus()
		{
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="Int NOT NULL")]
		public int User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastEventDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastEventDate
		{
			get
			{
				return this._LastEventDate;
			}
			set
			{
				if ((this._LastEventDate != value))
				{
					this.OnLastEventDateChanging(value);
					this.SendPropertyChanging();
					this._LastEventDate = value;
					this.SendPropertyChanged("LastEventDate");
					this.OnLastEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Transaction]", Storage="_Transaction", DbType="Char(36) NOT NULL", CanBeNull=false)]
		public string Transaction
		{
			get
			{
				return this._Transaction;
			}
			set
			{
				if ((this._Transaction != value))
				{
					this.OnTransactionChanging(value);
					this.SendPropertyChanging();
					this._Transaction = value;
					this.SendPropertyChanged("Transaction");
					this.OnTransactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderEmail", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string SenderEmail
		{
			get
			{
				return this._SenderEmail;
			}
			set
			{
				if ((this._SenderEmail != value))
				{
					this.OnSenderEmailChanging(value);
					this.SendPropertyChanging();
					this._SenderEmail = value;
					this.SendPropertyChanged("SenderEmail");
					this.OnSenderEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SenderName
		{
			get
			{
				return this._SenderName;
			}
			set
			{
				if ((this._SenderName != value))
				{
					this.OnSenderNameChanging(value);
					this.SendPropertyChanging();
					this._SenderName = value;
					this.SendPropertyChanged("SenderName");
					this.OnSenderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethod", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this.OnPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethod = value;
					this.SendPropertyChanged("PaymentMethod");
					this.OnPaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PaymentStatus", Storage="_User1", ThisKey="User", OtherKey="UserId", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.PaymentStatus.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.PaymentStatus.Add(this);
						this._User = value.UserId;
					}
					else
					{
						this._User = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
